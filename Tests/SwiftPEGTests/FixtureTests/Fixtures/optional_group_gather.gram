@grammar """
start: (a? b).(c? b)+ ;
a: 'a' ;
b: 'b' ;
c: 'c' ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | (a? b).(c? b)+
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark = self.mark()

        if
            let _ = try self.gather(separator: {
                try self._start__group_()
            }, item: {
                try self._start__group_1()
            })
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// a:
    ///     | 'a'
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark = self.mark()

        if
            let _ = try self.expect("a")
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// b:
    ///     | 'b'
    ///     ;
    /// ```
    @memoized("b")
    @inlinable
    public func __b() throws -> Node? {
        let _mark = self.mark()

        if
            let _ = try self.expect("b")
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// c:
    ///     | 'c'
    ///     ;
    /// ```
    @memoized("c")
    @inlinable
    public func __c() throws -> Node? {
        let _mark = self.mark()

        if
            let _ = try self.expect("c")
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _start__group_[(Node?, Node)]:
    ///     | a? b { (a: a, b: b) }
    ///     ;
    /// ```
    @memoized("_start__group_")
    @inlinable
    public func ___start__group_() throws -> (Node?, Node)? {
        let _mark = self.mark()

        if
            case let a = try self.a(),
            let b = try self.b()
        {
            return (a: a, b: b)
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _start__group_1[(Node?, Node)]:
    ///     | c? b { (c: c, b: b) }
    ///     ;
    /// ```
    @memoized("_start__group_1")
    @inlinable
    public func ___start__group_1() throws -> (Node?, Node)? {
        let _mark = self.mark()

        if
            case let c = try self.c(),
            let b = try self.b()
        {
            return (c: c, b: b)
        }

        self.restore(_mark)
        return nil
    }
}
""" ;

start: '' ;
