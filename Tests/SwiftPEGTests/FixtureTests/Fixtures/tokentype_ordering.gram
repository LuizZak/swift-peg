# Ensure that the token parsing function parses tokens in an order that prevents
# tokens from always shadowing other tokens that they are a prefix of.

@tokensFile "tokentype_ordering.tokens" ;

@expectedTokenType """
struct ParserToken: RawTokenType, CustomStringConvertible {
    var kind: TokenKind
    var string: Substring

    var length: Int {
        string.count
    }

    var description: String {
        String(string)
    }

    static func produceDummy(_ kind: TokenKind) -> Self {
        .init(kind: kind, string: "<dummy>")
    }

    static func from<StringType>(stream: inout StringStream<StringType>) -> Self? where StringType.SubSequence == Substring {
        guard !stream.isEof else { return nil }
        stream.markSubstringStart()

        if consume_identical(from: &stream) {
            return .init(kind: .identical, string: stream.substring)
        }
        if consume_equals(from: &stream) {
            return .init(kind: .equals, string: stream.substring)
        }
        if consume_assign(from: &stream) {
            return .init(kind: .assign, string: stream.substring)
        }
        if consume_leftSquare(from: &stream) {
            return .init(kind: .leftSquare, string: stream.substring)
        }
        if consume_notIdentical(from: &stream) {
            return .init(kind: .notIdentical, string: stream.substring)
        }
        if consume_notEquals(from: &stream) {
            return .init(kind: .notEquals, string: stream.substring)
        }
        if consume_logicalNot(from: &stream) {
            return .init(kind: .logicalNot, string: stream.substring)
        }
        if consume_rightSquare(from: &stream) {
            return .init(kind: .rightSquare, string: stream.substring)
        }
        if consume_string(from: &stream) {
            return .init(kind: .string, string: stream.substring)
        }

        return nil
    }

    enum TokenKind: TokenKindType {
        /// `"==="`
        case identical

        /// `"=="`
        case equals

        /// `"="`
        case assign

        /// `"["`
        case leftSquare

        /// `"!=="`
        case notIdentical

        /// `"!="`
        case notEquals

        /// `"!"`
        case logicalNot

        /// `"]"`
        case rightSquare

        /// `"\\"" (!"\\"" .)+ "\\""`
        case string

        var description: String {
            switch self {
            case .identical: "==="
            case .equals: "=="
            case .assign: "="
            case .leftSquare: "["
            case .notIdentical: "!=="
            case .notEquals: "!="
            case .logicalNot: "!"
            case .rightSquare: "]"
            case .string: "string"
            }
        }
    }

    /// ```
    /// identical:
    ///     | "==="
    ///     ;
    /// ```
    static func consume_identical<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("===")
    }

    /// ```
    /// equals:
    ///     | "=="
    ///     ;
    /// ```
    static func consume_equals<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("==")
    }

    /// ```
    /// assign:
    ///     | "="
    ///     ;
    /// ```
    static func consume_assign<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("=")
    }

    /// ```
    /// leftSquare:
    ///     | "["
    ///     ;
    /// ```
    static func consume_leftSquare<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("[")
    }

    /// ```
    /// notIdentical:
    ///     | "!=="
    ///     ;
    /// ```
    static func consume_notIdentical<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("!==")
    }

    /// ```
    /// notEquals:
    ///     | "!="
    ///     ;
    /// ```
    static func consume_notEquals<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("!=")
    }

    /// ```
    /// logicalNot:
    ///     | "!"
    ///     ;
    /// ```
    static func consume_logicalNot<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("!")
    }

    /// ```
    /// rightSquare:
    ///     | "]"
    ///     ;
    /// ```
    static func consume_rightSquare<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        stream.advanceIfNext("]")
    }

    /// ```
    /// string:
    ///     | "\\"" (!"\\"" .)+ "\\""
    ///     ;
    /// ```
    static func consume_string<StringType>(from stream: inout StringStream<StringType>) -> Bool {
        guard !stream.isEof else { return false }
        let state = stream.save()

        alt:
        do {
            guard stream.isNext("\\"") else {
                break alt
            }
            stream.advance()

            if !stream.isNext("\\""), !stream.isEof {
                stream.advance()
            } else {
                break alt
            }

            loop:
            while !stream.isEof {
                if !stream.isNext("\\""), !stream.isEof {
                    stream.advance()
                } else {
                    break loop
                }
            }

            guard stream.isNext("\\"") else {
                break alt
            }
            stream.advance()

            return true
        }

        stream.restore(state)

        return false
    }
}
""" ;

start: '' ;
