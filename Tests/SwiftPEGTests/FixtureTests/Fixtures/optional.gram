@grammar """
start: a b c? d? ;
a: 'a' ;
b: 'b' ;
c: 'c' ;
d: 'd' ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a b c? d?
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark: Mark = self.mark()

        if
            let a = try self.a(),
            let b = try self.b(),
            case let c = try self.c(),
            case let d = try self.d()
        {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// a:
    ///     | 'a'
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark: Mark = self.mark()

        if let _ = try self.expect("a") {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// b:
    ///     | 'b'
    ///     ;
    /// ```
    @memoized("b")
    @inlinable
    public func __b() throws -> Node? {
        let _mark: Mark = self.mark()

        if let _ = try self.expect("b") {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// c:
    ///     | 'c'
    ///     ;
    /// ```
    @memoized("c")
    @inlinable
    public func __c() throws -> Node? {
        let _mark: Mark = self.mark()

        if let _ = try self.expect("c") {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// d:
    ///     | 'd'
    ///     ;
    /// ```
    @memoized("d")
    @inlinable
    public func __d() throws -> Node? {
        let _mark: Mark = self.mark()

        if let _ = try self.expect("d") {
            return Node()
        }

        self.restore(_mark)

        return nil
    }
}
""" ;

start: '' ;
