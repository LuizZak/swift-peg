@grammar """
start: a ;
a: 'b'+< 'c' | 'b'+< 'd' ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark = self.mark()

        if
            let a = try self.a()
        {
            return a
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// a:
    ///     | 'b'+< 'c'
    ///     | 'b'+< 'd'
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark = self.mark()

        if
            case let (_?, _?) = try self._a_nsr()
        {
            return Node()
        }

        self.restore(_mark)

        if
            case let (_?, _?) = try self._a_nsr1()
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _a_nsr[([Token], Token)]:
    ///     | 'b'+< _a_nsr_tail
    ///     ;
    /// ```
    @memoized("_a_nsr")
    @inlinable
    public func ___a_nsr() throws -> ([Token]?, Token?) {
        var _current: [Token] = []

        while
            let _ = try self.expect("b")
        {
            _current.append(())
            let _mark = self.mark()

            if
                let _a_nsr_tail = try self._a_nsr_tail()
            {
                return (_current, _a_nsr_tail)
            }

            self.restore(_mark)
        }

        return (nil, nil)
    }

    /// ```
    /// _a_nsr1[([Token], Token)]:
    ///     | 'b'+< _a_nsr1_tail
    ///     ;
    /// ```
    @memoized("_a_nsr1")
    @inlinable
    public func ___a_nsr1() throws -> ([Token]?, Token?) {
        var _current: [Token] = []

        while
            let _ = try self.expect("b")
        {
            _current.append(())
            let _mark = self.mark()

            if
                let _a_nsr1_tail = try self._a_nsr1_tail()
            {
                return (_current, _a_nsr1_tail)
            }

            self.restore(_mark)
        }

        return (nil, nil)
    }

    /// ```
    /// _a_nsr_tail[Token]:
    ///     | 'c' { _ }
    ///     ;
    /// ```
    @memoized("_a_nsr_tail")
    @inlinable
    public func ___a_nsr_tail() throws -> Token? {
        let _mark = self.mark()

        if
            let _ = try self.expect("c")
        {
            return _
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _a_nsr1_tail[Token]:
    ///     | 'd' { _ }
    ///     ;
    /// ```
    @memoized("_a_nsr1_tail")
    @inlinable
    public func ___a_nsr1_tail() throws -> Token? {
        let _mark = self.mark()

        if
            let _ = try self.expect("d")
        {
            return _
        }

        self.restore(_mark)
        return nil
    }
}
""" ;

start: '' ;
