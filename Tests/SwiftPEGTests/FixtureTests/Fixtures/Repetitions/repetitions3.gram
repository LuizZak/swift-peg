# Validate behavior of trail item collecting in non-standard repetitions that
# happen with more than one bound item after the repetition

@grammar """
@token B ; @token C ; @token D ;
start: a ;
a: b+< c ~ d | b+> c ~ d ;
b[TokenType]: B ;
c[TokenType]: C ;
d[TokenType]: D ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark: Mark = self.mark()

        if let a = try self.a() {
            return a
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// a:
    ///     | b+< c ~ d
    ///     | b+> c ~ d
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark: Mark = self.mark()

        if case let (b?, c?, d?) = self.shuffleTuple(try self._a_nsr()) {
            return Node()
        }

        self.restore(_mark)

        if case let (b?, c?, d?) = self.shuffleTuple(try self._a_nsr1()) {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// b[TokenType]:
    ///     | B
    ///     ;
    /// ```
    @memoized("b")
    @inlinable
    public func __b() throws -> TokenType? {
        let _mark: Mark = self.mark()

        if let b = try self.B() {
            return b
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// c[TokenType]:
    ///     | C
    ///     ;
    /// ```
    @memoized("c")
    @inlinable
    public func __c() throws -> TokenType? {
        let _mark: Mark = self.mark()

        if let c = try self.C() {
            return c
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// d[TokenType]:
    ///     | D
    ///     ;
    /// ```
    @memoized("d")
    @inlinable
    public func __d() throws -> TokenType? {
        let _mark: Mark = self.mark()

        if let d = try self.D() {
            return d
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// _a_nsr[([TokenType], TokenType, TokenType)]:
    ///     | b+< c ~ d
    ///     ;
    /// ```
    @memoized("_a_nsr")
    @inlinable
    public func ___a_nsr() throws -> ([TokenType], TokenType, TokenType)? {
        let _mark: Mark = self.mark()

        var _cut: CutFlag = CutFlag()

        var _current: [TokenType] = []

        while
            !_cut.isOn,
            let b = try self.b()
        {
            _current.append(b)

            let _mark1: Mark = self.mark()

            if
                let c = try self.c(),
                _cut.toggleOn(),
                let d = try self.d()
            {
                return (_current, c, d)
            }

            self.restore(_mark1)
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// _a_nsr1[([TokenType], TokenType, TokenType)]:
    ///     | b+> c ~ d
    ///     ;
    /// ```
    @memoized("_a_nsr1")
    @inlinable
    public func ___a_nsr1() throws -> ([TokenType], TokenType, TokenType)? {
        let _mark: Mark = self.mark()

        var _cut: CutFlag = CutFlag()

        // Start by fetching as many productions as possible
        guard
            var _current: [(Mark, TokenType)] = try self.repeatOneOrMore({
                if let b = try self.b() {
                    return (self.mark(), b)
                }

                return nil
            })
        else {
            return nil
        }

        while
            !_cut.isOn,
            let _endMark = _current.last?.0
        {
            self.restore(_endMark)

            if
                let c = try self.c(),
                _cut.toggleOn(),
                let d = try self.d()
            {
                return (_current.map(\\.1), c, d)
            } else if _current.count <= 1 {
                break
            }

            // Drop an item, backtrack the parser, and try again
            _current.removeLast()
        }

        self.restore(_mark)

        return nil
    }
}
""" ;

start: '' ;
