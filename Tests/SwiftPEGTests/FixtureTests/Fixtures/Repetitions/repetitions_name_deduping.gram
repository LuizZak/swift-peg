@grammar """
@token b ; @token c ; @token d ;
start: a ;
a: b+< c | b+< d ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark = self.mark()

        if
            let a = try self.a()
        {
            return a
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// a:
    ///     | b+< c
    ///     | b+< d
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark = self.mark()

        if
            case let (b?, c?) = self.shuffleTuple(try self._a_nsr())
        {
            return Node()
        }

        self.restore(_mark)

        if
            case let (b?, d?) = self.shuffleTuple(try self._a_nsr1())
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _a_nsr[([Token], Token)]:
    ///     | b+< c
    ///     ;
    /// ```
    @memoized("_a_nsr")
    @inlinable
    public func ___a_nsr() throws -> ([Token], Token)? {
        let _mark = self.mark()

        var _current: [Token] = []

        while
            let b = try self.b()
        {
            _current.append(b)
            let _mark1 = self.mark()

            if
                let c = try self.c()
            {
                return (_current, c)
            }

            self.restore(_mark1)
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _a_nsr1[([Token], Token)]:
    ///     | b+< d
    ///     ;
    /// ```
    @memoized("_a_nsr1")
    @inlinable
    public func ___a_nsr1() throws -> ([Token], Token)? {
        let _mark = self.mark()

        var _current: [Token] = []

        while
            let b = try self.b()
        {
            _current.append(b)
            let _mark1 = self.mark()

            if
                let d = try self.d()
            {
                return (_current, d)
            }

            self.restore(_mark1)
        }

        self.restore(_mark)
        return nil
    }
}
""" ;

start: '' ;
