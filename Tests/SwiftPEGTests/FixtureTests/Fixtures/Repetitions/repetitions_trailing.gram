# Ensure that when a non-standard repetition has a trailing that doesn't bind (like a
# token literal), that it isn't mapped to the return type of the repetition method.

@grammar """
@token b ; @token c ; @token d ;
start: a ;
a: b+< c 'd' | b+> d 'c'?;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark: Mark = self.mark()

        if let a = try self.a() {
            return a
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// a:
    ///     | b+< c 'd'
    ///     | b+> d 'c'?
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark: Mark = self.mark()

        if case let (b?, c?) = self.shuffleTuple(try self._a_nsr()) {
            return Node()
        }

        self.restore(_mark)

        if case let (b?, d?) = self.shuffleTuple(try self._a_nsr1()) {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// _a_nsr[([Token], Token)]:
    ///     | b+< c 'd'
    ///     ;
    /// ```
    @memoized("_a_nsr")
    @inlinable
    public func ___a_nsr() throws -> ([Token], Token)? {
        let _mark: Mark = self.mark()

        var _current: [Token] = []

        while let b = try self.b() {
            _current.append(b)

            let _mark1: Mark = self.mark()

            if
                let c = try self.c(),
                let _ = try self.expect("d")
            {
                return (_current, c)
            }

            self.restore(_mark1)
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// _a_nsr1[([Token], Token)]:
    ///     | b+> d 'c'?
    ///     ;
    /// ```
    @memoized("_a_nsr1")
    @inlinable
    public func ___a_nsr1() throws -> ([Token], Token)? {
        let _mark: Mark = self.mark()

        // Start by fetching as many productions as possible
        guard
            var _current: [(Mark, Token)] = try self.repeatOneOrMore({
                if let b = try self.b() {
                    return (self.mark(), b)
                }

                return nil
            })
        else {
            return nil
        }

        while let _endMark = _current.last?.0 {
            self.restore(_endMark)

            if
                let d = try self.d(),
                case _ = try self.expect("c")
            {
                return (_current.map(\\.1), d)
            } else if _current.count <= 1 {
                break
            }

            // Drop an item, backtrack the parser, and try again
            _current.removeLast()
        }

        self.restore(_mark)

        return nil
    }
}
""" ;

start: '' ;
