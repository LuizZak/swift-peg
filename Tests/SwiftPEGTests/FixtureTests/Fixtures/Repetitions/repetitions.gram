@grammar """
@token B ; @token C ; @token D ;
start: a ;
a: b+< c*> d ;
b[TokenType]: B ;
c[TokenType]: C ;
d[TokenType]: D ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark = self.mark()

        if
            let a = try self.a()
        {
            return a
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// a:
    ///     | b+< c*> d
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark = self.mark()

        if
            case let (b?, c?, d?) = self.shuffleTuple(try self._a_nsr())
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// b[TokenType]:
    ///     | B
    ///     ;
    /// ```
    @memoized("b")
    @inlinable
    public func __b() throws -> TokenType? {
        let _mark = self.mark()

        if
            let b = try self.B()
        {
            return b
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// c[TokenType]:
    ///     | C
    ///     ;
    /// ```
    @memoized("c")
    @inlinable
    public func __c() throws -> TokenType? {
        let _mark = self.mark()

        if
            let c = try self.C()
        {
            return c
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// d[TokenType]:
    ///     | D
    ///     ;
    /// ```
    @memoized("d")
    @inlinable
    public func __d() throws -> TokenType? {
        let _mark = self.mark()

        if
            let d = try self.D()
        {
            return d
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _a_nsr[([TokenType], [TokenType], TokenType)]:
    ///     | b+< c*> d
    ///     ;
    /// ```
    @memoized("_a_nsr")
    @inlinable
    public func ___a_nsr() throws -> ([TokenType], [TokenType], TokenType)? {
        let _mark = self.mark()

        var _current: [TokenType] = []

        while
            let b = try self.b()
        {
            _current.append(b)
            let _mark1 = self.mark()

            if
                case let (c?, d?) = self.shuffleTuple(try self.__a_nsr_nsr())
            {
                return (_current, c, d)
            }

            self.restore(_mark1)
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// __a_nsr_nsr[([TokenType], TokenType)]:
    ///     | c*> d
    ///     ;
    /// ```
    @memoized("__a_nsr_nsr")
    @inlinable
    public func ____a_nsr_nsr() throws -> ([TokenType], TokenType)? {
        let _mark = self.mark()

        // Start by fetching as many productions as possible
        guard
            var _current: [(Mark, TokenType)] = try self.repeatZeroOrMore({
                if let c = try self.c() { return (self.mark(), c) }
                return nil
            })
        else {
            return nil
        }

        while true {
            let _endMark = _current.last?.0 ?? _mark
            self.restore(_endMark)

            if
                let d = try self.d()
            {
                return (_current.map(\\.1), d)
            } else if _current.isEmpty {
                break
            }

            // Drop an item, backtrack the parser, and try again
            _current.removeLast()
        }

        self.restore(_mark)
        return nil
    }
}
""" ;

start: '' ;
