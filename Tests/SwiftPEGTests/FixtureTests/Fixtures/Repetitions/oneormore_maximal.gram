@grammar """
@token d; @token e; @tokenCallKind "expectKind" ;
start: a b+> c;
a[A]: 'a' ;
b[B]: 'b' ;
c[C]: 'c'? 'e' ;
""" ;

@emitTypesInBindings true ;
@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a b+> c
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark = self.mark()

        if
            let a: A = try self.a(),
            case let (b?, c?) = self.shuffleTuple(try self._start_nsr())
        {
            return Node()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// a[A]:
    ///     | 'a'
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> A? {
        let _mark = self.mark()

        if
            let _: Token = try self.expect("a")
        {
            return A()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// b[B]:
    ///     | 'b'
    ///     ;
    /// ```
    @memoized("b")
    @inlinable
    public func __b() throws -> B? {
        let _mark = self.mark()

        if
            let _: Token = try self.expect("b")
        {
            return B()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// c[C]:
    ///     | 'c'? 'e'
    ///     ;
    /// ```
    @memoized("c")
    @inlinable
    public func __c() throws -> C? {
        let _mark = self.mark()

        if
            case _: Token? = try self.expect("c"),
            let _: Token = try self.expect("e")
        {
            return C()
        }

        self.restore(_mark)
        return nil
    }

    /// ```
    /// _start_nsr[(b: [B], c: C)]:
    ///     | b+> c
    ///     ;
    /// ```
    @memoized("_start_nsr")
    @inlinable
    public func ___start_nsr() throws -> (b: [B], c: C)? {
        let _mark = self.mark()

        // Start by fetching as many productions as possible
        guard
            var _current: [(Mark, B)] = try self.repeatOneOrMore({
                if let b: B = try self.b() { return (self.mark(), b) }
                return nil
            })
        else {
            return nil
        }

        while let _endMark = _current.last?.0 {
            self.restore(_endMark)

            if
                let c: C = try self.c()
            {
                return (_current.map(\\.1), c)
            } else if _current.count <= 1 {
                break
            }

            // Drop an item, backtrack the parser, and try again
            _current.removeLast()
        }

        self.restore(_mark)
        return nil
    }
}
""" ;

start: '' ;
