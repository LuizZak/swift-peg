@grammar """
start: a ;
a: (b d)+< c ;
b: b 'c' ;
c[[TokenType]]: d='d'+ ;
d[TokenType]: d='d' ;
e: (b d)+> c ;
""" ;

@expectedParser """
extension Parser {
    /// ```
    /// start:
    ///     | a
    ///     ;
    /// ```
    @memoized("start")
    @inlinable
    public func __start() throws -> Node? {
        let _mark: Mark = self.mark()

        if let a = try self.a() {
            return a
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// a:
    ///     | (b d)+< c
    ///     ;
    /// ```
    @memoized("a")
    @inlinable
    public func __a() throws -> Node? {
        let _mark: Mark = self.mark()

        if case let (_?, c?) = self.shuffleTuple(try self._a_nsr()) {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// b:
    ///     | b 'c'
    ///     ;
    /// ```
    @memoizedLeftRecursive("b")
    @inlinable
    public func __b() throws -> Node? {
        let _mark: Mark = self.mark()

        if
            let b = try self.b(),
            let _ = try self.expect("c")
        {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// c[[TokenType]]:
    ///     | d='d'+
    ///     ;
    /// ```
    @memoized("c")
    @inlinable
    public func __c() throws -> [TokenType]? {
        let _mark: Mark = self.mark()

        if
            let d = try self.repeatOneOrMore({
                try self.expect("d")
            })
        {
            return d
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// d[TokenType]:
    ///     | d='d'
    ///     ;
    /// ```
    @memoized("d")
    @inlinable
    public func __d() throws -> TokenType? {
        let _mark: Mark = self.mark()

        if let d = try self.expect("d") {
            return d
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// e:
    ///     | (b d)+> c
    ///     ;
    /// ```
    @memoized("e")
    @inlinable
    public func __e() throws -> Node? {
        let _mark: Mark = self.mark()

        if case let (_?, c?) = self.shuffleTuple(try self._e_nsr()) {
            return Node()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// _a_nsr[([(Node, TokenType)], [TokenType])]:
    ///     | (b d)+< c
    ///     ;
    /// ```
    @memoized("_a_nsr")
    @inlinable
    public func ___a_nsr() throws -> ([(Node, TokenType)], [TokenType])? {
        let _mark: Mark = self.mark()

        var _current: [(b: Node, d: TokenType)] = []

        while case let (b?, d?) = self.shuffleTuple(try self.__a_nsr__group_()) {
            _current.append((b, d))

            let _mark1: Mark = self.mark()

            if let c = try self.c() {
                return (_current, c)
            }

            self.restore(_mark1)
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// _e_nsr[([(Node, TokenType)], [TokenType])]:
    ///     | (b d)+> c
    ///     ;
    /// ```
    @memoized("_e_nsr")
    @inlinable
    public func ___e_nsr() throws -> ([(Node, TokenType)], [TokenType])? {
        let _mark: Mark = self.mark()

        // Start by fetching as many productions as possible
        guard
            var _current: [(Mark, (b: Node, d: TokenType))] = try self.repeatOneOrMore({
                if case let (b?, d?) = self.shuffleTuple(try self.__a_nsr__group_()) {
                    return (self.mark(), (b, d))
                }

                return nil
            })
        else {
            return nil
        }

        while let _endMark = _current.last?.0 {
            self.restore(_endMark)

            if let c = try self.c() {
                return (_current.map(\\.1), c)
            } else if _current.count <= 1 {
                break
            }

            // Drop an item, backtrack the parser, and try again
            _current.removeLast()
        }

        self.restore(_mark)

        return nil
    }

    /// ```
    /// __a_nsr__group_[(Node, TokenType)]:
    ///     | b d { (b: b, d: d) }
    ///     ;
    /// ```
    @memoized("__a_nsr__group_")
    @inlinable
    public func ____a_nsr__group_() throws -> (Node, TokenType)? {
        let _mark: Mark = self.mark()

        if
            let b = try self.b(),
            let d = try self.d()
        {
            return (b: b, d: d)
        }

        self.restore(_mark)

        return nil
    }
}
""" ;

start: '' ;
