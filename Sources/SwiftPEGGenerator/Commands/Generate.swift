import Foundation
import ArgumentParser
import Console
import SwiftPEG

struct Generate: ParsableCommand {
    static let configuration = CommandConfiguration(
        commandName: "generate",
        discussion: """
        Generates parser and tokens files from .gram SwiftPEG grammar files.
        """
    )

    @OptionGroup(title: "Global")
    var commonOptions: CommonOptions

    @OptionGroup
    var options: ParserGenSettings

    @Option(
        help: """
        File path to save generated code to.
        """
    )
    var output: String

    func run() throws {
        let console = commonOptions.makeConsole()

        console.printStage(name: "Parsing grammar...")
        let rawGrammar = try commonOptions.parseRawGrammar()

        console.printStage(name: "Processing grammar...")
        let processed = try commonOptions.processGrammar(grammar: rawGrammar)

        console.printStage(name: "Generating parser...")
        let codeGen = SwiftCodeGen(from: processed)
        let settings = try options.toSwiftCodeGenParserGenSettings()
        let generated = try codeGen.generateParser(settings: settings)

        try generated.write(
            to: .init(fileURLWithPath: output),
            atomically: true,
            encoding: .utf8
        )

        console.printSuccessMessage()
    }

    struct ParserGenSettings: ParsableArguments {
        @Flag(
            help: """
            Omits rule methods that are unreachable from the set entry rule.
            """
        )
        var omitUnreachable: Bool = false

        @Flag(
            help: """
            Emits types in if-let bindings generated by grammar items in parser \
            rule methods.
            """
        )
        var emitTypesInBindings: Bool = false

        @Flag(
            help: """
            Avoid emitting 'mark()'/'restore(mark)' calls if the parsing methods \
            don't require them.

            Note: May lead to certain actions that expecte a '_mark' available in \
            the alternative context to fail compiling.
            """
        )
        var omitRedundantMarkRestores: Bool = false

        func toSwiftCodeGenParserGenSettings() throws -> SwiftCodeGen.ParserGenSettings {
            .init(
                omitUnreachable: omitUnreachable,
                emitTypesInBindings: emitTypesInBindings,
                omitRedundantMarkRestores: omitRedundantMarkRestores
            )
        }
    }
}
