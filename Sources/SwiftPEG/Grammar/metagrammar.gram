# Metagrammar for SwiftPEG - based on https://github.com/we-like-parsers/pegen_experiments/blob/master/pegen/metagrammar.gram (see LICENSE.pegen.md)
# This metagrammar requires the MetagrammarRawTokenizer for tokenizing.

start[Metagrammar.Grammar]: grammar { grammar } ;

grammar[Metagrammar.Grammar]:
    | metas rules { .init(metas: metas, rules: rules) }
    | rules { .init(metas: [], rules: rules) }
    ;

metas[[Metagrammar.Meta]]:
    | meta metas { [meta] + metas }
    | meta { [meta] }
    ;

meta[Metagrammar.Meta]:
    | "@" name=IDENT value=metaValue ';' { .init(name: name, value: value) }
    | "@" name=IDENT ';' { .init(name: name, value: nil) }
    ;

metaValue[Metagrammar.MetaValue]:
    | ident=IDENT { Metagrammar.MetaIdentifierValue(identifier: ident) }
    | string=STRING { Metagrammar.MetaStringValue(string: string) }
    ;

rules[[Metagrammar.Rule]]:
    | rule rules { [rule] + rules }
    | rule { [rule] }
    ;

rule[Metagrammar.Rule]:
    | ruleName ":" '|' alts ';' { .init(name: ruleName, alts: alts) }
    | ruleName ":" alts ';' { .init(name: ruleName, alts: alts) }
    ;

ruleName[Metagrammar.RuleName]:
    | a=IDENT '[' type=swiftType ']' { .init(name: name, type: type) }
    | a=IDENT { .init(name: name, type: nil) }
    ;

alts[[Metagrammar.Alt]]:
    | alt "|" alts { [alt] + alts }
    | alt { [alt] }
    ;

alt[Metagrammar.Alt]:
    | namedItems action { .init(namedItems: namedItems, action: action) }
    | namedItems { .init(namedItems: namedItems, action: nil) }
    ;

namedItems[[Metagrammar.NamedItem]]:
    | namedItem namedItems { [namedItem] + namedItems }
    | namedItem { [namedItem] }
    ;

namedItem[Metagrammar.NamedItem]:
    | name=IDENT '[' type=swiftType ']' '=' ~ item { .init(name: name, item: item, type: swiftType, lookahead: nil) }
    | name=IDENT '=' ~ item { .init(name: name, item: item, type: nil, lookahead: nil) }
    | item { .init(name: nil, item: item, type: nil, lookahead: nil) }
    | lookahead { .init(name: nil, item: nil, type: nil, lookahead: lookahead) }
    ;

lookahead[Metagrammar.LookaheadOrCut]:
    | '&' ~ atom { Metagrammar.PositiveLookahead(atom: atom) }
    | '!' ~ atom { Metagrammar.NegativeLookahead(atom: atom) }
    | '~' { Metagrammar.Cut() }
    ;

item[Metagrammar.Item]:
    | '[' ~ alts ']' { Metagrammar.OptionalItems(alts: alts) }
    |  atom '?' { Metagrammar.OptionalItem(atom: atom) }
    |  atom '*' { Metagrammar.ZeroOrMoreItem(atom: atom) }
    |  atom '+' { Metagrammar.OneOrMoreItem(atom: atom) }
    |  sep=atom '.' node=atom '+' { Metagrammar.GatherItem(sep: sep, item: node) }
    |  atom { Metagrammar.AtomItem(atom: atom) }
    ;

atom[Metagrammar.Atom]:
    | '(' ~ alts ')' { Metagrammar.GroupAtom(alts: alts) }
    | a=IDENT { Metagrammar.IdentAtom(identifier: ident) }
    | a=STRING { Metagrammar.StringAtom(string: string) }
    ;

swiftType[Metagrammar.SwiftType]:
    | '[' ~ type=swiftType ']' { .init(name: "[" + type.name + "]") }
    | '(' ~ types=swiftTypeList ')' { .init(name: "(" + types.map(\.name).joined(separator: ", ") + ")") }
    | name=IDENT '<' ~ types=swiftTypeList '>' '?' { .init(name: name.identifier + "<" + types.map(\.name).joined(separator: ", ") + ">?") }
    | name=IDENT '<' ~ types=swiftTypeList '>' { .init(name: name.identifier + "<" + types.map(\.name).joined(separator: ", ") + ">") }
    | name=IDENT '.' ~ inner=swiftType { .init(name: name.identifier + "." + inner.name) }
    | name=IDENT '?' { .init(name: name.identifier + "?") }
    | name=IDENT { .init(name: name.identifier) }
    ;

swiftTypeList[[Metagrammar.SwiftType]]:
    | type=swiftType ',' types=swiftTypeList { [type] + types }
    | type=swiftType { [type] }
    ;

# Mini-grammar for the actions

action[Metagrammar.Action]:
    | "{" ~ balancedTokens "}" { .init(balancedTokens: balancedTokens) }
    ;

balancedTokens[Metagrammar.BalancedTokens]:
    | balancedToken balancedTokens  { .init(tokens: balancedToken.tokens + balancedTokens.tokens) }
    | balancedToken  { balancedToken }
    ;

balancedToken[Metagrammar.BalancedTokens]:
    | '{' balancedTokens '}' { .init(tokens: ["{"] + balancedTokens.tokens + ["}"]) }
    | '[' balancedTokens ']' { .init(tokens: ["["] + balancedTokens.tokens + ["]"]) }
    | '<' balancedTokens '>' { .init(tokens: ["<"] + balancedTokens.tokens + [">"]) }
    | '(' balancedTokens ')' { .init(tokens: ["("] + balancedTokens.tokens + [")"]) }
    | '[' ~ ']' { .init(tokens: ["(", ")"]) }
    | '{' ~ '}' { .init(tokens: ["{", "}"]) }
    | '<' ~ '>' { .init(tokens: ["<", ">"]) }
    | '(' ~ ')' { .init(tokens: ["(", ")"]) }
    | token=balancedTokenAtom { .init(tokens: [token.string]) }
    ;

balancedTokenAtom[Token]:
    | IDENT
    | DIGITS
    | STRING
    | ':'
    | ';'
    | '|'
    | '='
    | '~'
    | '*'
    | '+'
    | '?'
    | ','
    | '.'
    | '@'
    | '/'
    | '\'
    ;
