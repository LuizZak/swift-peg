# Grammar for SwiftPEG - based on https://github.com/we-like-parsers/pegen_experiments/blob/master/pegen/metagrammar.gram (see LICENSE.pegen.md)
# This metagrammar requires the GrammarRawTokenizer for tokenizing.

@parserName "GrammarParser" ;
@parserHeader """
// HEADS UP! This is a generated file

/// A parser for SwiftPEG grammar files.
public final class GrammarParser<RawTokenizer: RawTokenizerType>: PEGParser<RawTokenizer>
    where RawTokenizer.RawToken == SwiftPEGGrammar.Token, RawTokenizer.Location == FileSourceLocation
{ }
""" ;
@tokenTypeHeader """
// HEADS UP! This is a generated file
""" ;

@tokensFile "metagrammar.tokens" ;
@tokenCall expectKind ;
@anyToken ANY ;


# Start of grammar

start[SwiftPEGGrammar.Grammar]: grammar { grammar } ;

grammar[SwiftPEGGrammar.Grammar]:
    | metas=meta* rules=rule+ { self.setLocation(.init(metas: metas, rules: rules), at: _mark) }
    ;

meta[SwiftPEGGrammar.Meta]:
    | "@" name=IDENTIFIER values=metaValue* ';' { self.setLocation(.init(name: name.rawToken, values: values), at: _mark) }
    ;

metaValue[SwiftPEGGrammar.MetaValue]:
    | ident=IDENTIFIER  { self.setLocation(SwiftPEGGrammar.MetaIdentifierValue(identifier: ident.rawToken), at: _mark) }
    | string            { self.setLocation(SwiftPEGGrammar.MetaStringValue(string: string), at: _mark) }
    ;

rule[SwiftPEGGrammar.Rule]:
    | ruleName ":" action? failAction? '|'? alts ';'    { self.setLocation(.init(name: ruleName, action: action, failAction: failAction, alts: alts), at: _mark) }
    ;

ruleName[SwiftPEGGrammar.RuleName]:
    | name=IDENTIFIER '[' ~ type=swiftType ']'  { self.setLocation(.init(name: name.rawToken, type: type), at: _mark) }
    | name=IDENTIFIER                           { self.setLocation(.init(name: name.rawToken, type: nil), at: _mark) }
    ;

alts[[SwiftPEGGrammar.Alt]]:
    | "|".alt+
    ;

alt[SwiftPEGGrammar.Alt]:
    | altLabel? namedItems action? failAction?  { self.setLocation(.init(altLabel: altLabel, namedItems: namedItems, action: action, failAction: failAction), at: _mark) }
    ;

altLabel[SwiftPEGGrammar.AltLabel]:
    | label=IDENTIFIER ':'                      { self.setLocation(.init(name: label.rawToken), at: _mark) }
    ;

namedItems[[SwiftPEGGrammar.NamedItem]]:
    | namedItem+
    ;

namedItem[SwiftPEGGrammar.NamedItem]:
    | name=IDENTIFIER '[' type=swiftType ']' '=' ~ item     { self.setLocation(.init(name: name.rawToken, item: item, type: type, lookahead: nil), at: _mark) }
    | name=IDENTIFIER '=' ~ item                            { self.setLocation(.init(name: name.rawToken, item: item, type: nil, lookahead: nil), at: _mark) }
    | item                                                  { self.setLocation(.init(name: nil, item: item, type: nil, lookahead: nil), at: _mark) }
    | lookahead                                             { self.setLocation(.init(name: nil, item: nil, type: nil, lookahead: lookahead), at: _mark) }
    ;

lookahead[SwiftPEGGrammar.LookaheadOrCut]:
    | '&''&' ~ atom   { self.setLocation(SwiftPEGGrammar.Forced(atom: atom), at: _mark) }
    | '&' ~ atom      { self.setLocation(SwiftPEGGrammar.PositiveLookahead(atom: atom), at: _mark) }
    | '!' ~ atom      { self.setLocation(SwiftPEGGrammar.NegativeLookahead(atom: atom), at: _mark) }
    | '~'             { self.setLocation(SwiftPEGGrammar.Cut(), at: _mark) }
    ;

item[SwiftPEGGrammar.Item]:
    | '[' ~ alts ']'                               { self.setLocation(SwiftPEGGrammar.OptionalItems(alts: alts), at: _mark) }
    | atom '?'                                     { self.setLocation(SwiftPEGGrammar.OptionalItem(atom: atom), at: _mark) }
    | atom '*' repetitionMode?                     { self.setLocation(SwiftPEGGrammar.ZeroOrMoreItem(atom: atom, repetitionMode: repetitionMode ?? .standard), at: _mark) }
    | atom '+' repetitionMode?                     { self.setLocation(SwiftPEGGrammar.OneOrMoreItem(atom: atom, repetitionMode: repetitionMode ?? .standard), at: _mark) }
    | sep=atom '.' node=atom '+' repetitionMode?   { self.setLocation(SwiftPEGGrammar.GatherItem(sep: sep, item: node, repetitionMode: repetitionMode ?? .standard), at: _mark) }
    | atom                                         { self.setLocation(SwiftPEGGrammar.AtomItem(atom: atom), at: _mark) }
    ;
repetitionMode[CommonAbstract.RepetitionMode]:
    | '<'                                           { .minimal }
    | '>'                                           { .maximal }
    ;

atom[SwiftPEGGrammar.Atom]:
    | '(' ~ alts ')'    { self.setLocation(SwiftPEGGrammar.GroupAtom(alts: alts), at: _mark) }
    | IDENTIFIER        { self.setLocation(SwiftPEGGrammar.IdentAtom(identifier: identifier.rawToken, identity: .unresolved), at: _mark) }
    | string            { self.setLocation(SwiftPEGGrammar.StringAtom(string: string), at: _mark) }
    ;

swiftType[CommonAbstract.SwiftType]:
    | '(' swiftTupleTypeList? ')'                       { .tuple(swiftTupleTypeList ?? []) }
    | '[' key=swiftType ':' ~ value=swiftType ']'       { .dictionary(key: key, value: value) }
    | '[' ~ swiftType ']'                               { .array(swiftType) }
    | swiftType '?'                                     { .optional(swiftType) }
    | swiftType '.' IDENTIFIER '<' swiftTypeList '>'    { .nested(swiftType, .init(identifier: "\(identifier)", genericArguments: swiftTypeList)) }
    | swiftType '.' IDENTIFIER                          { .nested(swiftType, .init(identifier: "\(identifier)")) }
    | IDENTIFIER '<' swiftTypeList '>'                  { .nominal(.init(identifier: "\(identifier)", genericArguments: swiftTypeList)) }
    | IDENTIFIER                                        { .nominal(.init(identifier: "\(identifier)")) }
    ;

swiftTypeList[[CommonAbstract.SwiftType]]:
    | ','.swiftType+
    ;

swiftTupleTypeList[[CommonAbstract.TupleTypeElement]]:
    | ','.swiftTupleTypeElement+
    ;

swiftTupleTypeElement[CommonAbstract.TupleTypeElement]:
    | label=IDENTIFIER ':' swiftType    { .labeled(label: "\(label)", swiftType) }
    | swiftType                         { .unlabeled(swiftType) }
    ;

# Mini-grammar for the actions

action[SwiftPEGGrammar.Action]:
    | "{" ~ balancedTokens "}"                  { self.setLocation(.init(balancedTokens: balancedTokens), at: _mark) }
    ;

failAction[SwiftPEGGrammar.Action]:
    | "!!" "{" ~ balancedTokens "}"             { self.setLocation(.init(balancedTokens: balancedTokens), at: _mark) }
    ;

balancedTokens[SwiftPEGGrammar.TokenSequence]:
    | balancedToken+                            { .from(balancedToken) }
    ;

balancedToken[SwiftPEGGrammar.TokenSequence]:
      # Explicitly consume whitespace prior to other token kinds since whitespace gets skipped automatically, if it's not explicitly being checked for
    | token=WHITESPACE                          { .from(token) }
    | l='{' ~ balancedToken* r='}'              { .from(l).appending(contentsOf: balancedToken).appending(.from(r)) }
    | token=balancedTokenAtom                   { token }
    ;

balancedTokenAtom[SwiftPEGGrammar.TokenSequence]:
    | string                { .from(string) }
    | !"{" !"}" token=ANY   { .from(token) }
    ;


# Strings

string[SwiftPEGGrammar.GrammarString]:
    | token=STRING                     { try .fromStringToken(token) }
    ;


# Tokens file grammar

tokensFile[[SwiftPEGGrammar.TokenDefinition]]:
    | tokens=tokenDefinition*
    ;

# TODO: Consider implementing lexer channels if needs be?
# tokensFile[[SwiftPEGGrammar.TokenFileDeclaration]]:
#     | tokensFileDeclaration*
#     ;
# 
# tokensFileDeclaration[[SwiftPEGGrammar.TokenFileDeclaration]]:
#     | tokenDefinition
#     | tokenChannelDeclaration
#     ;
# 
# tokenChannelDeclaration[[SwiftPEGGrammar.TokenChannel]]:
#     | '@' IDENTIFIER                            { "\(identifier)" == "channel" ? self.setLocation(.init(identifier: identifier), at: _mark) : nil }
#     ;

# Note: tokenCodeReference must resolve statically to a token reference when PEGParser.expect()/PEGParser.expect(kind:) uses it as its argument.
#       Usually this can be simplified to a `.tokenReference` for RawTokenType/RawTokenType.TokenKind types that provide statically-accessible token declarations,
#       but may be any Swift expression that resolves to the desired token when paired with an appropriate tokenizer's token type.
tokenDefinition[SwiftPEGGrammar.TokenDefinition]:
    | spec=tokenOrFragmentSpecifier name=IDENTIFIER '[' tokenCodeReference=string ']' ':' ~ tokenSyntax ';'    { self.setLocation(.init(name: name.rawToken, isFragment: spec.kind == .percent, tokenCodeReference: tokenCodeReference, tokenSyntax: tokenSyntax), at: _mark) }
    | spec=tokenOrFragmentSpecifier name=IDENTIFIER '[' tokenCodeReference=string ']' ';'                      { self.setLocation(.init(name: name.rawToken, isFragment: spec.kind == .percent, tokenCodeReference: tokenCodeReference, tokenSyntax: nil), at: _mark) }
    | spec=tokenOrFragmentSpecifier name=IDENTIFIER ':' ~ tokenSyntax ';'                               { self.setLocation(.init(name: name.rawToken, isFragment: spec.kind == .percent, tokenCodeReference: nil, tokenSyntax: tokenSyntax), at: _mark) }
    | spec=tokenOrFragmentSpecifier name=IDENTIFIER ';'                                                 { self.setLocation(.init(name: name.rawToken, isFragment: spec.kind == .percent, tokenCodeReference: nil, tokenSyntax: nil), at: _mark) }
    ;

tokenOrFragmentSpecifier[RawToken]:
    | token='$'   { token.rawToken }
    | token='%'   { token.rawToken }
    ;

tokenSyntax[CommonAbstract.TokenSyntax]:
    | '|'? '|'.tokenSyntaxAlt+                      { .init(alts: tokenSyntaxAlt) }
    ;

tokenSyntaxAlt[CommonAbstract.TokenAlt]:
    | tokenSyntaxItem+ tokenSyntaxExclusion*        { .init(items: tokenSyntaxItem, trailExclusions: tokenSyntaxExclusion) }
    ;

tokenSyntaxItem[CommonAbstract.TokenItem]:
    | '(' '|'.tokenSyntaxAtom+ ')' '*'              { .zeroOrMore(tokenSyntaxAtom) }
    | '(' '|'.tokenSyntaxAtom+ ')' '+'              { .oneOrMore(tokenSyntaxAtom) }
    | '(' '|'.tokenSyntaxAtom+ ')' '?'              { .optionalGroup(tokenSyntaxAtom) }
    | '(' '|'.tokenSyntaxAtom+ ')'                  { .group(tokenSyntaxAtom) }
    | tokenSyntaxAtom '*'                           { .zeroOrMore([tokenSyntaxAtom]) }
    | tokenSyntaxAtom '+'                           { .oneOrMore([tokenSyntaxAtom]) }
    # TODO: Maybe collapse optionalAtom into optionalGroup?
    | tokenSyntaxAtom '?'                           { .optionalAtom(tokenSyntaxAtom) }
    | tokenSyntaxAtom                               { .atom(tokenSyntaxAtom) }
    ;

tokenSyntaxAtom[CommonAbstract.TokenAtom]:
    | tokenSyntaxExclusion* tokenSyntaxTerminal     { .init(excluded: tokenSyntaxExclusion, terminal: tokenSyntaxTerminal) }
    ;

tokenSyntaxExclusion[CommonAbstract.TokenExclusion]:
    | '!' start=string '...' end=string             { .rangeLiteral(.from(start), .from(end)) }
    | '!' string                                    { .literal(.from(string)) }
    | '!' IDENTIFIER                                { .identifier("\(identifier)") }
    ;

tokenSyntaxTerminal[CommonAbstract.TokenTerminal]:
    | IDENTIFIER action                             { .characterPredicate("\(identifier)", action.rawAction) }
    | start=string '...' end=string                 { .rangeLiteral(.from(start), .from(end)) }
    | string                                        { .literal(.from(string)) }
    | IDENTIFIER                                    { .identifier("\(identifier)") }
    | '.'                                           { .any }
    ;
